package com.example.sofra.ui.Fragment.ReguestFragment.BranchesCycle;import android.content.Intent;import android.os.Bundle;import android.os.CountDownTimer;import android.os.Handler;import android.support.v4.app.Fragment;import android.support.v7.widget.CardView;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import android.widget.FrameLayout;import android.widget.TextView;import com.example.sofra.MainActivity;import com.example.sofra.R;import com.example.sofra.adapter.SaleAdapter.MyItemClientRestaurantAdapter;import com.example.sofra.data.api.SaleApi.ApiServicesSale;import com.example.sofra.data.model.itemFood.ItemFoodData;import com.example.sofra.helper.HelperMethod;import com.example.sofra.ui.Activity.ReguestActivity.Reguest_Cycle_detailsActivity;import com.example.sofra.ui.Activity.ReguestActivity.Replace_Login_Activity;import com.example.sofra.ui.Fragment.ReguestFragment.HomeCycle.Reguest_Show_FoodmenuFragment;import com.example.sofra.ui.Fragment.ReguestFragment.UserCycle.User_Home_Cycle_Activity;import com.example.sofra.ui.RoomDatabase.RoomManger;import java.util.ArrayList;import java.util.List;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.OnClick;import butterknife.Unbinder;import static com.example.sofra.data.local.SharedPreferenceManager.KEY_IS_CHECK_BOX;import static com.example.sofra.data.local.SharedPreferenceManager.LoadBooleanClient;/** * A simple {@link Fragment} subclass. */public class INShare_Private_OrderFragment extends Fragment {    public List<ItemFoodData> itemFoodDataList = new ArrayList<>();public Reguest_Cycle_detailsActivity reguest_cycle_detailsActivity;    public MyItemClientRestaurantAdapter myItemClientRestaurantAdapter;    @BindView(R.id.Card)    CardView Card;    @BindView(R.id.Confirm_Order)    Button ConfirmOrder;    @BindView(R.id.more_Choice)    Button moreChoice;    Unbinder unbinder;    @BindView(R.id.RecyclerViewadapter)    RecyclerView RecyclerViewadapter;    @BindView(R.id.Total_Number)    TextView TotalNumber;    ;    private ApiServicesSale apiServices;    private RoomManger roomManger;    private Handler handler;    private static final long SLIDER_TIMER = 1000;    private ItemFoodData RestaurantItem;    public INShare_Private_OrderFragment() {        // Required empty public constructor    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        // Inflate the layout for this fragment        View view = inflater.inflate(R.layout.fragment_inshare__private__order, container, false);        unbinder = ButterKnife.bind(this, view);        setupRecycler();        handler = new Handler();        handler.postDelayed(runnable, SLIDER_TIMER);        runnable.run();        return view;    }    private void setupRecycler() {        roomManger = RoomManger.getInstance(getContext());        LinearLayoutManager mang = new LinearLayoutManager(getActivity());        RecyclerViewadapter.setLayoutManager(mang);        myItemClientRestaurantAdapter = new MyItemClientRestaurantAdapter(itemFoodDataList,getActivity(),reguest_cycle_detailsActivity);        RecyclerViewadapter.setAdapter(myItemClientRestaurantAdapter);    }    @Override    public void onDestroyView() {        super.onDestroyView();        unbinder.unbind();    }    @OnClick({R.id.Confirm_Order, R.id.more_Choice})    public void onViewClicked(View view) {        switch (view.getId()) {            case R.id.Confirm_Order:                Intent i=new Intent(getActivity(), Replace_Login_Activity.class);               getActivity().startActivity(i);               getActivity().finish();//                LogInClientFragment logInClientFragment = new LogInClientFragment();//                HelperMethod.replace(logInClientFragment, getActivity().getSupportFragmentManager(), R.id.User_Home_Cycle_Frame, null, null);                break;            case R.id.more_Choice://                Reguest_Show_FoodmenuFragment reguest_show_foodmenuFragment = new Reguest_Show_FoodmenuFragment();//                HelperMethod.replace(reguest_show_foodmenuFragment, getActivity().getSupportFragmentManager(), R.id.Reguest_Home_Cycle_Frame, null, null);//                if (!LoadBooleanClient(getActivity(), KEY_IS_CHECK_BOX)) {                    Reguest_Show_FoodmenuFragment reguest_show_foodmenuFragment = new Reguest_Show_FoodmenuFragment();                    HelperMethod.replace(reguest_show_foodmenuFragment, getActivity().getSupportFragmentManager(), R.id.Reguest_Home_Cycle_Frame, null, null);                } else {                    Bundle bundle1 = new Bundle();                    bundle1.putInt("getTotal", (int) myItemClientRestaurantAdapter.getTotal());                    bundle1.putInt("getIdRestaurant", myItemClientRestaurantAdapter.IdRestaurant);                    ConfirmOrderDetailsClientFragment confirmOrderDetailsClientFragment = new ConfirmOrderDetailsClientFragment();                    HelperMethod.replace(confirmOrderDetailsClientFragment,getActivity().getSupportFragmentManager(),R.id.Reguest_Home_Cycle_Frame,null,null);                }                break;        }    }    Runnable runnable = (new Runnable() {        @Override        public void run() {            new CountDownTimer(SLIDER_TIMER, 1000) {                @Override                public void onTick(long millisUntilFinished) {                    try {//                        TotalNumber.setText("" + Double.valueOf(itemFoodDataList.get(i).getPrice()) *quantity);                        TotalNumber.setText("" + myItemClientRestaurantAdapter.getTotal());                    } catch (Exception e) {                        e.getMessage();                    }                }                @Override                public void onFinish() {                }            }.start();            handler.postDelayed(runnable, SLIDER_TIMER);        }    });}